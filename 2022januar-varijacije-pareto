#include <iostream>
#include <vector>
#include <cmath>
#include <map>

void printSpanningTree(const std::vector<int>& T, int len);
void seqToSpanningTree(const std::vector<int>& P, int len, std::vector<int>& T);
double f1_cost(const std::vector<int>& conn, int len);
int f2_cost(const std::vector<int>& spanning);

std::vector<std::vector<int>> all_sequence;

std::vector<std::vector<double>> all_cost;


void nTuples(int n, int k){

    int* P = new int[k];
    for(int i = 0;i < k;i++){
        P[i] = 0;
    }

    int q;
    long iter = 0;

    do{
        std::vector<int> one_seq(k);

        // Jedna sekvenca
        for(int i = 0;i < k;i++){
            one_seq[i] = P[i] + 1;
        }
        all_sequence.push_back(one_seq);

        // Pravljenje stabla od sekvence
        std::vector<int> spanningTree(2*(n + 1));
        seqToSpanningTree(all_sequence[iter], k, spanningTree);
        iter++;

        // Izracunavanje cene funckije
        double f1 = f1_cost(spanningTree, n);
        int f2 = f2_cost(spanningTree);

        std::vector<double> costs(2);
        costs[0] = f1;
        costs[1] = f2;
        all_cost.push_back(costs);


        q = k - 1;
        while(q >= 0){
            P[q]++;
            if (P[q] == n){
                P[q] = 0;
                q--;
            }else
                break;
        }
    }while(q >= 0);
    std::cout << "-----------------\n";
    long len = pow(n, n -2);
//    for(long i = 0;i < len;i++){
//        for(int j = 0; j < k;j++){
//            std::cout << all_sequence[i][j] << " ";
//        }
//        std::cout << "\n";
//    }
    delete [] P;
}

std::vector<int> x_coordinates = {400, 230, 600, 550, 100, 600, 800, 1050, 1000 };
std::vector<int> y_coordinates = {25, 350, 500, 700, 975, 750, 1300, 600, 150 };

//std::vector<int> T = {1,3, 2,6, 2,7, 2,9, 3,4, 3,9, 5,6, 5,8};
//std::vector<int> T = {1,3, 2,3, 3,5, 3,6, 3,7, 3,8, 3,9, 4,8};

int ng_counter(const std::vector<int>& connection, int node){
    int cnt = 0;
    for(const auto& c : connection){
        if(c == node) cnt++;
    }
    return cnt;
}


double cost(int p1, int p2){
    int dot1x = x_coordinates[p1];
    int dot1y = y_coordinates[p1];

    int dot2x = x_coordinates[p2];
    int dot2y = y_coordinates[p2];

    int distance =  (dot1x - dot2x)*(dot1x - dot2x) + (dot1y - dot2y)*(dot1y - dot2y);
//    int penalty = 0;
//    for(int i = 1; i <= 9;i++){
//        int tmp = ng_counter(T, i);
//        if(tmp >= 4) penalty += 250*(tmp - 3);
//    }
    return sqrt(distance);
}

double f1_cost(const std::vector<int>& conn, int len){
    double c = 0;
    for(int node = 0; node < 2*(len + 1);node+=2){
        int dot1 = conn[node];
        int dot2 = conn[node + 1];
        c += cost(dot1 - 1, dot2 - 1);
    }
    return c;
}

int f2_cost(const std::vector<int>& spanning){
    int maxConnection = 0;
    for(int i = 1; i <= 9;i++){
        int tmp = ng_counter(spanning, i);
        if(maxConnection < tmp){
            maxConnection = tmp;
        }
    }
    return  maxConnection;
}

int main() {
//    std::vector<int> P = {3, 3, 4, 5, 4, 6};
//    int len = 6;
//    std::vector<int> T(2*( len+1));
//    seqToSpanningTree(P, len, T);
//    printSpanningTree(T, len);
//    double c = 0;
//    for(int node = 0; node < 8*2;node+=2){
//        int dot1 = T[node];
//        int dot2 = T[node + 1];
//        std::cout << dot1 << " " << dot2 << " - ";
//        c += cost(dot1 - 1, dot2 - 1);
//    }
//    std::cout << c << '\n';
//    int maxConnection = 0;
//    for(int i = 1; i <= 9;i++){
//        if(maxConnection < ng_counter(T, i)){
//            maxConnection = ng_counter(T, i);
//        }
//    }
//    std::cout << maxConnection << '\n';

    nTuples(9, 7);
    long len = pow(9, 7);

    for(long i = 0; i < len;i++){
        // Gledamo jel ima dominanto fj nad fi
        bool flag = true;
        double f1i = all_cost[i][0];
        double f2i = all_cost[i][1];

//        if(f1i > 3393.0 && f1i < 3394.0 ){
//            std:: cout << f1i << '\n';
//            std:: cout << f2i << '\n';
//        }
        for(long j = 0; j < len;j++){
            if(i == j) continue;
            double f1j = all_cost[j][0];
            double f2j = all_cost[j][1];

            if( (f1j <= f1i && f2j <= f2i) && (f1j < f1i || f2j < f2i)){
                flag = false;
                break;
            }
        }
        if(flag){
            std::cout << "F1: " << f1i << " F2: "<< f2i << "\n";
            std::vector<int> spng(2*(9 + 1));

            //seqToSpanningTree(all_sequence[i], 7, spng);
            //printSpanningTree(spng, 9);
        }

    }

    return 0;
}

void seqToSpanningTree(const std::vector<int>& P, int len, std::vector<int>& T) {
    // P kombinacija
    // T sekvenca

    int i = 0;
    int j = 0;
    int q = 0;

    int n = len + 2;
    //int* V = new int[n];
    // for (i = 0; i < n; i++) V[i] = 0;
    std::vector<int> V(n);


    for (i = 0; i < len; i++)
        V[P[i] - 1] += 1;

    for (i = 0; i < len; i++) {
        for (j = 0; j < n; j++) {
            if (V[j] == 0) {
                V[j] = -1;
                T[q++] = j + 1;
                T[q++] = P[i];
                V[P[i] - 1]--;
                break;
            }
        }
    }

    j = 0;
    for (i = 0; i < n; i++) {
        if (V[i] == 0 && j == 0) {
            T[q++] = i + 1;
            j++;
        }else if (V[i] == 0 && j == 1) {
            T[q++] = i + 1;
            break;
        }
    }
    // delete[] V;
}

void printSpanningTree(const std::vector<int>& T, int len) {
    for (int i = 0; i < 2*(len + 1); i++) {
        std::cout << " " << T[i];
        if ((i + 1) % 2 == 0 && i < 2 * len)
            std:: cout<< " - ";
    }
    std::cout << std::endl;
}
